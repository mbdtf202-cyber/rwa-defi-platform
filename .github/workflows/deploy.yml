name: Deploy to Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy-contracts:
    name: Deploy Smart Contracts
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: |
          cd packages/contracts
          npm install
      
      - name: Compile contracts
        run: cd packages/contracts && npm run compile
      
      - name: Deploy to network
        run: cd packages/contracts && npm run deploy:testnet
        env:
          PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
          INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
      
      - name: Verify contracts
        run: cd packages/contracts && npm run verify
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            rwa-defi/backend
            rwa-defi/ml-services
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      
      - name: Build and push Backend
        uses: docker/build-push-action@v4
        with:
          context: ./packages/backend
          push: true
          tags: rwa-defi/backend:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push ML Services
        uses: docker/build-push-action@v4
        with:
          context: ./packages/ml-services
          push: true
          tags: rwa-defi/ml-services:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-k8s:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [build-and-push]
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
      
      - name: Update image tags
        run: |
          cd k8s
          sed -i "s|image: rwa-defi/backend:.*|image: rwa-defi/backend:${{ github.ref_name }}|g" backend-deployment.yaml
          sed -i "s|image: rwa-defi/ml-services:.*|image: rwa-defi/ml-services:${{ github.ref_name }}|g" ml-deployment.yaml
      
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/postgres-deployment.yaml
          kubectl apply -f k8s/backend-deployment.yaml
          kubectl apply -f k8s/ml-deployment.yaml
          kubectl apply -f k8s/ingress.yaml
      
      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/backend -n rwa-defi
          kubectl rollout status deployment/ml-services -n rwa-defi
      
      - name: Run database migrations
        run: |
          kubectl exec -n rwa-defi deployment/backend -- npx prisma migrate deploy

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: |
          cd rwa-defi-platform
          npm install
      
      - name: Build
        run: cd rwa-defi-platform && npm run build
        env:
          VITE_API_URL: ${{ secrets.API_URL }}
          VITE_CHAIN_ID: ${{ secrets.CHAIN_ID }}
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./rwa-defi-platform
          vercel-args: '--prod'

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-contracts, deploy-k8s, deploy-frontend]
    if: always()
    
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment ${{ job.status }}
            Environment: ${{ github.event.inputs.environment || 'production' }}
            Version: ${{ github.ref_name }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
