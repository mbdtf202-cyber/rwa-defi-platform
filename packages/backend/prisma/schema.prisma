// Prisma schema for RWA DeFi Platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  passwordHash    String
  walletAddress   String?   @unique
  kycStatus       KYCStatus @default(PENDING)
  kycHash         String?
  kycProvider     String?
  kycCompletedAt  DateTime?
  userType        UserType  @default(INDIVIDUAL)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  transactions    Transaction[]
  auditLogs       AuditLog[]
  
  @@index([email])
  @@index([walletAddress])
  @@index([kycStatus])
}

enum KYCStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum UserType {
  INDIVIDUAL
  INSTITUTIONAL
}

enum Role {
  USER
  ADMIN
  SPV_MANAGER
  COMPLIANCE_OFFICER
  AUDITOR
}

model SPV {
  id                    String     @id @default(uuid())
  companyName           String
  jurisdiction          String
  legalRepresentative   String
  registrationNumber    String     @unique
  tokenAddress          String?    @unique
  custodyAccount        String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  
  properties            Property[]
  documents             Document[]
  valuations            Valuation[]
  
  @@index([tokenAddress])
}

model Property {
  id              String    @id @default(uuid())
  spvId           String
  address         String
  type            PropertyType
  area            Decimal
  purchasePrice   Decimal
  currentValue    Decimal?
  occupancyRate   Decimal?
  monthlyRent     Decimal?
  lat             Decimal?
  lon             Decimal?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  spv             SPV       @relation(fields: [spvId], references: [id])
  documents       Document[]
  
  @@index([spvId])
  @@index([type])
}

enum PropertyType {
  COMMERCIAL
  RESIDENTIAL
  MIXED
}

model Document {
  id          String       @id @default(uuid())
  entityType  EntityType
  entityId    String
  type        DocumentType
  ipfsHash    String
  onchainHash String?
  fileName    String?
  fileSize    BigInt?
  uploadedBy  String
  uploadedAt  DateTime     @default(now())
  
  spv         SPV?         @relation(fields: [entityId], references: [id], map: "Document_spv_fkey")
  property    Property?    @relation(fields: [entityId], references: [id], map: "Document_property_fkey")
  
  @@index([entityType, entityId])
  @@index([ipfsHash])
}

enum EntityType {
  SPV
  PROPERTY
  USER
}

enum DocumentType {
  DEED
  LEASE
  AUDIT
  KYC
  OTHER
}

model Transaction {
  id            String            @id @default(uuid())
  userId        String
  type          TransactionType
  tokenAddress  String
  amount        Decimal
  price         Decimal?
  fromAddress   String?
  toAddress     String?
  txHash        String?           @unique
  blockNumber   BigInt?
  status        TransactionStatus @default(PENDING)
  timestamp     DateTime          @default(now())
  createdAt     DateTime          @default(now())
  confirmedAt   DateTime?
  
  user          User              @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([txHash])
  @@index([status])
}

enum TransactionType {
  MINT
  BURN
  TRANSFER
  DIVIDEND
  DEPOSIT
  WITHDRAW
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
}

model Valuation {
  id              String   @id @default(uuid())
  spvId           String
  value           Decimal
  lowerCI         Decimal?
  upperCI         Decimal?
  confidence      Decimal?
  modelVersion    String
  valuationDate   DateTime
  createdAt       DateTime @default(now())
  
  spv             SPV      @relation(fields: [spvId], references: [id])
  
  @@index([spvId])
  @@index([valuationDate])
}

model AuditLog {
  id              String   @id @default(uuid())
  userId          String?
  action          String
  resource        String
  resourceId      String?
  ipAddress       String?
  userAgent       String?
  requestBody     Json?
  responseStatus  Int
  details         String?
  timestamp       DateTime @default(now())
  
  user            User?    @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([timestamp])
  @@index([action])
}

model Alert {
  id              String   @id @default(uuid())
  type            String
  severity        String
  message         String
  metadata        Json?
  acknowledged    Boolean  @default(false)
  acknowledgedAt  DateTime?
  createdAt       DateTime @default(now())
  
  @@index([acknowledged])
  @@index([severity])
  @@index([createdAt])
}

model BlockchainEvent {
  id              String   @id @default(uuid())
  eventType       String
  contractAddress String
  blockNumber     BigInt
  transactionHash String
  eventData       Json
  processed       Boolean  @default(false)
  processedAt     DateTime?
  createdAt       DateTime @default(now())
  
  @@index([processed])
  @@index([eventType])
  @@index([blockNumber])
}

model TokenHolding {
  id              String   @id @default(uuid())
  userId          String
  tokenAddress    String
  balance         Decimal
  lockedUntil     DateTime?
  updatedAt       DateTime @updatedAt
  
  @@unique([userId, tokenAddress])
  @@index([userId])
  @@index([tokenAddress])
}

model DividendDistribution {
  id              String   @id @default(uuid())
  tokenAddress    String
  totalAmount     Decimal
  perTokenAmount  Decimal
  distributionDate DateTime
  txHash          String?
  status          String   @default("PENDING")
  createdAt       DateTime @default(now())
  
  @@index([tokenAddress])
  @@index([distributionDate])
}

model VaultPosition {
  id              String   @id @default(uuid())
  userId          String
  vaultAddress    String
  shares          Decimal
  depositedAmount Decimal
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([userId, vaultAddress])
  @@index([userId])
  @@index([vaultAddress])
}

model Loan {
  id              String   @id @default(uuid())
  userId          String
  amount          Decimal
  collateralAmount Decimal
  interestRate    Decimal
  status          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId])
  @@index([status])
}

model MLPrediction {
  id              String   @id @default(uuid())
  modelType       String
  inputData       Json
  predictedValue  Float
  actualValue     Float?
  confidence      Float?
  createdAt       DateTime @default(now())
  
  @@index([modelType])
  @@index([createdAt])
}

model Order {
  id              String   @id @default(uuid())
  userId          String
  tokenAddress    String
  orderType       String
  side            String
  amount          Decimal
  price           Decimal?
  filled          Decimal  @default(0)
  status          String   @default("OPEN")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId])
  @@index([tokenAddress])
  @@index([status])
}

model Trade {
  id              String   @id @default(uuid())
  buyOrderId      String
  sellOrderId     String
  tokenAddress    String
  amount          Decimal
  price           Decimal
  buyerId         String
  sellerId        String
  executedAt      DateTime @default(now())
  
  @@index([buyOrderId])
  @@index([sellOrderId])
  @@index([tokenAddress])
}
