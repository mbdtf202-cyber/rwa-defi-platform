// Prisma schema for RWA DeFi Platform - SQLite Version for Development

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  passwordHash    String
  walletAddress   String?   @unique
  kycStatus       String    @default("PENDING") // KYCStatus enum as string for SQLite
  kycHash         String?
  kycProvider     String?
  kycCompletedAt  DateTime?
  userType        String    @default("INDIVIDUAL") // UserType enum as string
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  transactions    Transaction[]
  auditLogs       AuditLog[]
}

model SPV {
  id                    String     @id @default(uuid())
  companyName           String
  jurisdiction          String
  legalRepresentative   String
  registrationNumber    String     @unique
  tokenAddress          String?    @unique
  custodyAccount        String?
  status                String     @default("PENDING") // SPVStatus enum as string
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  
  properties            Property[]
  documents             Document[]
  transactions          Transaction[]
  valuations            Valuation[]
}

model Property {
  id              String    @id @default(uuid())
  spvId           String
  address         String
  propertyType    String    // PropertyType enum as string
  area            Float
  bedrooms        Int?
  bathrooms       Int?
  yearBuilt       Int?
  purchasePrice   Float
  currentValue    Float?
  monthlyRent     Float?
  occupancyRate   Float?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  spv             SPV       @relation(fields: [spvId], references: [id])
  valuations      Valuation[]
}

model Document {
  id              String    @id @default(uuid())
  spvId           String
  documentType    String    // DocumentType enum as string
  ipfsHash        String
  blockchainHash  String?
  uploadedBy      String
  uploadedAt      DateTime  @default(now())
  verified        Boolean   @default(false)
  verifiedAt      DateTime?
  verifiedBy      String?
  
  spv             SPV       @relation(fields: [spvId], references: [id])
}

model Transaction {
  id              String    @id @default(uuid())
  userId          String
  spvId           String?
  type            String    // TransactionType enum as string
  amount          Float
  tokenAmount     Float?
  status          String    @default("PENDING") // TransactionStatus enum as string
  txHash          String?
  createdAt       DateTime  @default(now())
  completedAt     DateTime?
  
  user            User      @relation(fields: [userId], references: [id])
  spv             SPV?      @relation(fields: [spvId], references: [id])
}

model Valuation {
  id              String    @id @default(uuid())
  propertyId      String
  spvId           String
  valuationType   String    // ValuationType enum as string
  value           Float
  confidence      Float?
  source          String
  valuationDate   DateTime  @default(now())
  createdAt       DateTime  @default(now())
  
  property        Property  @relation(fields: [propertyId], references: [id])
  spv             SPV       @relation(fields: [spvId], references: [id])
}

model AuditLog {
  id              String    @id @default(uuid())
  userId          String
  action          String
  entityType      String
  entityId        String
  changes         String?   // JSON as string
  ipAddress       String?
  userAgent       String?
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id])
}
